import express from "express";
import fetch from "node-fetch";

const app = express();
const port = 3000;

const API_URL = "http://35.200.185.69:8000/v1/autocomplete?query="; //change v1,vv2,v3 as per problem statement's need (rest of the code remains the same)
const collectedNames = new Set();
const searchedPrefixes = new Set();
let queue = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

let requestCount = 0;
let namesPulledCount = 0;
const INITIAL_CONCURRENCY = 3;
let concurrencyLimit = INITIAL_CONCURRENCY;

console.log("Starting optimized name extraction...");

async function fetchNames(prefix, attempt = 1) {
    if (searchedPrefixes.has(prefix)) return;
    searchedPrefixes.add(prefix);

    try {
        requestCount++;
        const response = await fetch(API_URL + prefix);

        if (response.status === 429) {
            let waitTime = Math.min(500 * attempt, 6000);
            console.warn(`Rate limited on: ${prefix}. Retrying in ${waitTime / 1000}s...`);
            await delay(waitTime);
            return await fetchNames(prefix, attempt + 1);
        }

        if (!response.ok) throw new Error(`HTTP Error! Status: ${response.status}`);

        const data = await response.json();
        let newNames = [];

        if (data.results) {
            for (let name of data.results) {
                if (!collectedNames.has(name) && name.length > prefix.length) {
                    collectedNames.add(name);
                    namesPulledCount++;
                    newNames.push(name);
                }
            }
        }

      
        if (newNames.length >= 5) {
            queue.push(...newNames.map(name => name.slice(0, prefix.length + 1)));
        }
    } catch (error) {
        console.error(`Error fetching ${prefix}:`, error);
    }
}




async function discoverNames() {
    while (queue.length > 0) {
        const batch = queue.splice(0, concurrencyLimit);
        console.log(`Fetching names for: ${batch}`);
        await Promise.all(batch.map(fetchNames));
        await delay(300);
    }
    console.log("Extraction Complete! Found names:", collectedNames.size);
    console.log([...collectedNames]);
}

discoverNames();

app.get("/stats", (req, res) => {
    res.json({ requestCount, namesPulledCount, totalNames: collectedNames.size });
});

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
